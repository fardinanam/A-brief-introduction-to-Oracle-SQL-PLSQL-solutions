BEGIN
	DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
END;

DECLARE 
	HIREDATE DATE;
	MONTHS NUMBER;
BEGIN
	SELECT HIRE_DATE INTO HIREDATE
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = 100;
	
	MONTHS := ROUND(MONTHS_BETWEEN(SYSDATE, HIREDATE));
	DBMS_OUTPUT.PUT_LINE('EMPLOYEE worked ' || MONTHS || ' months');
END;

DECLARE
	HIREDATE DATE;
	YEARS NUMBER;
BEGIN
	SELECT HIRE_DATE INTO HIREDATE
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = 10000;
	
	YEARS := MONTHS_BETWEEN(SYSDATE, HIREDATE) / 12;
	
	IF YEARS >= 10 THEN
		DBMS_OUTPUT.PUT_LINE('The employee worked 10 years or more');
	ELSE
		DBMS_OUTPUT.PUT_LINE('The employee worked less than 10 years');
	END IF;

EXCEPTION
	WHEN NO_DATA_FOUND THEN 
		DBMS_OUTPUT.PUT_LINE('Employee is not present in darabase');
	WHEN INVALID_NUMBER THEN
		DBMS_OUTPUT.PUT_LINE('Invalid Number');
	WHEN TOO_MANY_ROWS THEN
		DBMS_OUTPUT.PUT_LINE('More than one employees with the same ID. So, I dont know which one to show. :")');
	WHEN OTHERS THEN 
		DBMS_OUTPUT.PUT_LINE('I dont know what happened');
END;

BEGIN
	INSERT INTO COUNTRIES VALUES('BN', 'Bangladesh', 7);
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		DBMS_OUTPUT.PUT_LINE('This COUNTRY_ID already exists');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('Something went wrong.');
END;

DECLARE 
	YEARS NUMBER;
	COUNTER NUMBER;
BEGIN
	COUNTER := 0;
	
	FOR HIREDATE IN (SELECT HIRE_DATE FROM EMPLOYEES)
	LOOP
		YEARS := MONTHS_BETWEEN(SYSDATE, HIREDATE.HIRE_DATE) / 12;
		IF YEARS >= 20 THEN
			COUNTER := COUNTER + 1;
		END IF;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('Number of employees working more than 20 years is ' || COUNTER);
END;

DECLARE
	PREVIOUS_SALARY NUMBER;
	INCREASED_SALARY NUMBER;
BEGIN
	FOR R IN (SELECT EMPLOYEE_ID, SALARY
						FROM EMPLOYEES
						WHERE MONTHS_BETWEEN(SYSDATE, HIRE_DATE) / 12 >= 20)
	LOOP
		PREVIOUS_SALARY := R.SALARY;
		INCREASED_SALARY := PREVIOUS_SALARY + PREVIOUS_SALARY * 0.15;
		
		UPDATE EMPLOYEES
		SET SALARY = INCREASED_SALARY
		WHERE EMPLOYEE_ID = R.EMPLOYEE_ID;
		
		DBMS_OUTPUT.PUT_LINE('Salary of ' || R.EMPLOYEE_ID || ' increased');
		DBMS_OUTPUT.PUT_LINE('Previous salary: ' || PREVIOUS_SALARY || ' updated salary: ' || INCREASED_SALARY);
	END LOOP;
	COMMIT;
END;


CREATE OR REPLACE PROCEDURE IS_SENIOR_EMPLOYEE IS
	HIREDATE DATE;

BEGIN 
	SELECT HIRE_DATE INTO HIREDATE
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = 100;
	
	IF MONTHS_BETWEEN(SYSDATE, HIREDATE) / 12 >= 10 THEN
		DBMS_OUTPUT.PUT_LINE('The employee worked 10 years or more') ;
	ELSE
		DBMS_OUTPUT.PUT_LINE('The employee worked less than 10 years') ;
	END IF;
END;

DECLARE
BEGIN 
	IS_SENIOR_EMPLOYEE(100);
END;

CREATE OR REPLACE PROCEDURE IS_SENIOR_EMPLOYEE(EID IN VARCHAR2, MSG OUT VARCHAR2) IS
	HIREDATE DATE;
BEGIN
	SELECT HIRE_DATE INTO HIREDATE
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = EID;
	
	IF MONTHS_BETWEEN(SYSDATE, HIREDATE) / 12 >= 10 THEN
		MSG := 'The employee with EMPLOYEE_ID ' || EID || ' worked 10 years or more';
	ELSE
		MSG := 'The employee with EMPLOYEE_ID ' || EID || ' worked less than 10 years';
	END IF;
	
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		MSG := 'No employee with this id exist';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'More than one employee found.';
END;
	
DECLARE
	MSG VARCHAR2(100);
BEGIN 
	IS_SENIOR_EMPLOYEE(100, MSG);
	DBMS_OUTPUT.PUT_LINE(MSG);
	
EXCEPTION
	WHEN VALUE_ERROR THEN
		DBMS_OUTPUT.PUT_LINE('The message length is larger than you expected!');
END;


CREATE OR REPLACE FUNCTION GET_SENIOR_EMPLOYEE(EID IN VARCHAR2)
RETURN VARCHAR2 IS
	HIREDATE DATE;
	MSG VARCHAR2(100);
BEGIN
	SELECT HIRE_DATE INTO HIREDATE
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = EID;
	
	IF MONTHS_BETWEEN(SYSDATE, HIREDATE) / 12 >= 10 THEN
		MSG := 'The employee with EMPLOYEE_ID ' || EID || ' worked 10 years or more';
	ELSE
		MSG := 'The employee with EMPLOYEE_ID ' || EID || ' worked less than 10 years';
	END IF;
	
	RETURN MSG;
	
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 'No employee with this id exist';
	WHEN TOO_MANY_ROWS THEN
		RETURN 'More than one employee found.';
END;

DECLARE
	MSG VARCHAR2(100);
BEGIN 
	MSG := GET_SENIOR_EMPLOYEE(100);
	DBMS_OUTPUT.PUT_LINE(MSG);
	
EXCEPTION
	WHEN VALUE_ERROR THEN
		DBMS_OUTPUT.PUT_LINE('The message length is larger than you expected!');
END;

SELECT LAST_NAME, GET_SENIOR_EMPLOYEE(EMPLOYEE_ID)
FROM EMPLOYEES;

CREATE OR REPLACE FUNCTION ISNUMBER(VAL IN VARCHAR2)
RETURN VARCHAR2 IS
	N NUMBER;
BEGIN
	N := TO_NUMBER(VAL);
	RETURN 'YES';
	
EXCEPTION
	WHEN VALUE_ERROR THEN
		RETURN 'NO';
END;

BEGIN
	DBMS_OUTPUT.PUT_LINE(ISNUMBER('1B0'));
END;

CREATE TABLE STUDENTS(
	STUDENT_NAME VARCHAR2(250),
	CGPA NUMBER
);

CREATE OR REPLACE TRIGGER HELLO_WORLD
AFTER INSERT
ON STUDENTS
DECLARE
BEGIN 
	DBMS_OUTPUT.PUT_LINE('Hello World.');
END;

CREATE OR REPLACE TRIGGER HELLO_WORLD2
BEFORE INSERT
ON STUDENTS
DECLARE
BEGIN
		DBMS_OUTPUT.PUT_LINE('Hello World2');
END;

CREATE OR REPLACE TRIGGER HELLO_WORLD3
AFTER INSERT OR DELETE
ON STUDENTS
DECLARE
BEGIN
		DBMS_OUTPUT.PUT_LINE('Hello World3');
END;

CREATE OR REPLACE TRIGGER HELLO_WORLD4
AFTER UPDATE OF CGPA
ON STUDENTS
DECLARE
BEGIN
		DBMS_OUTPUT.PUT_LINE('Hello World4');
END;

CREATE OR REPLACE TRIGGER HELLO_WORLD5
AFTER UPDATE 
OF CGPA
ON STUDENTS 
FOR EACH ROW
DECLARE
BEGIN
		DBMS_OUTPUT.PUT_LINE('Hello World5');
END;

INSERT INTO STUDENTS VALUES('Shakib Ahmed', 3.63);

UPDATE STUDENTS
SET CGPA = 3.935
WHERE STUDENT_NAME = 'Aungon';

DELETE FROM STUDENTS
WHERE STUDENT_NAME = 'Aungon';

DELETE FROM STUDENTS 
WHERE CGPA < 3.65 ;

UPDATE STUDENTS
SET CGPA = CGPA + 0.01
WHERE STUDENT_NAME LIKE '%Shakib%';

CREATE OR REPLACE TRIGGER OLD_NEW_TEST
BEFORE INSERT OR UPDATE OR DELETE
ON STUDENTS
FOR EACH ROW
DECLARE
BEGIN
	DBMS_OUTPUT.PUT_LINE(':OLD.CGPA = ' || :OLD.CGPA) ;
	DBMS_OUTPUT.PUT_LINE(':NEW.CGPA = ' || :NEW.CGPA) ;
END ;

INSERT INTO STUDENTS VALUES ('SOUMIK SARKAR', 3.85);
UPDATE STUDENTS SET CGPA = CGPA + 0.02 ;
DELETE FROM STUDENTS WHERE CGPA < 3.90;

DROP TRIGGER HELLO_WORLD;